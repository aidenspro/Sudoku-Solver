#--------------------------------------------------------------------------------------------
#  Copyright (c) Red Hat, Inc. All rights reserved.
#  Licensed under the MIT License. See LICENSE in the project root for license information.
#--------------------------------------------------------------------------------------------

# This program solves Sudoku Puzzles!

#matrix
#traverse from 0,0 list[0][0] to list[9][9]
puzzle = [[0,0,0,0,7,0,0,0,0],
          [0,0,0,5,0,0,0,9,0],
          [0,0,0,4,0,9,0,0,8],
          [0,1,9,0,5,0,0,8,0],
          [2,0,0,6,1,0,0,0,9],
          [0,0,4,0,0,0,0,0,3],
          [0,0,0,0,6,0,0,5,2],
          [0,8,0,7,0,0,9,0,0],
          [0,0,3,0,8,5,6,0,0]]
#reg list
#traverse from 0 list[0] to list[80]
puzzle1 = [0, 0, 0, 0, 7, 0, 0, 0, 0,
           0, 0, 0, 5, 0, 0, 0, 9, 0,
           0, 0, 0, 4, 0, 9, 0, 0, 8,
           0, 1, 9, 0, 5, 0, 0, 8, 0,
           2, 0, 0, 6, 1, 0, 7, 0, 9,
           0 ,0 ,4 ,0 ,0 ,0 ,0 ,0 ,3,
           0, 0, 0, 0, 6, 0, 0, 5, 2,
           0 ,8 ,0 ,7 ,0 ,0 ,9 ,0 ,0,
           0, 0, 3, 0, 8, 5, 6, 0, 0]

#changable puzzle1
temp = puzzle1

#rep =     [0,  1,  2,  3,  4,  5,  6,  7,  8,
#           9,  10, 11, 12, 13, 14, 15, 16, 17,
#           18, 19, 20, 21, 22, 23, 24, 25, 26,
#           27, 28, 29, 30, 31, 32, 33, 34, 35,
#           36, 37, 38, 39, 40, 41, 42, 43, 44,
#           45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53,
#           54, 55, 56, 57, 58, 59, 60, 61, 62,
#           63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71,
#           72, 73, 74, 75, 76, 77, 78, 79, 80]

# takes a puzzle and an index of a number and returns the corrsponding row number
def findRow(puz1, index):
    if index < 9  :
        return 0
    elif  index >= 9 and index < 18 :
        return 1
    elif  index >= 18 and index < 27 :
        return 2
    elif  index >= 27 and index < 36 :
        return 3
    elif  index >= 36 and index < 45 :
        return 4
    elif  index >= 45 and index < 54 :
        return 5
    elif  index >= 54 and index < 63 :
        return 6
    elif  index >= 63 and index < 72 :
        return 7
    elif  index >= 72 and index < 81 :
        return 8
#print(findRow(puzzle1,17))

# takes a puzzle and an index of a number and returns the corrsponding column number
def findCol(puz1, index):
    return index % 9
#print(findCol(puzzle1,17))

# takes a puzzle and an index of a number and returns the first index of the block
def findBlock(puz1, index):
    col = findCol(puz1,index)
    row = findRow(puz1,index)

    if row < 3  :
        if    col < 3  :
            return 0
        elif  col >= 3 and col < 6 :
            return 3
        elif  col >= 6 and col < 9 :
            return 6

    elif  row >= 3 and row < 6 :

        if    col < 3  :
            return 27
        elif  col >= 3 and col < 6 :
            return 30
        elif  col >= 6 and col < 9 :
            return 33

    elif  row >= 6 and row < 9 :

        if    col < 3  :
            return 54
        elif  col >= 3 and col < 6 :
            return 57
        elif  col >= 6 and col < 9 :
            return 60

#print(findBlock(puzzle1,17))


# takes a puzzle, an index, and a number, and checks the row to see if that number is already in the row
# returns 1 if in the row, 0 if not
def checkRow(puz1,index,num):
    row = findRow(puz1,index)
    s = 9 * row
    e = 8 + 9 * row

    for x in range (s,e):
     if num == puz1[x] :
        return 1

    return 0

#print(checkRow(puzzle1,17,9))
#checkRow(puzzle1,17,7)

# takes a puzzle, an index, and a number, and checks the row to see if that number is already in the Column
# returns 1 if in the Column, 0 if not
def checkCol(puz1,index,num):
    col = findCol(puz1,index)
    x = col

    while (x < 81) :

        if num == puz1[x] :
            return 1
        x += 9
    return 0

#print(checkCol(puzzle1,17,1))

# takes a puzzle, an index, and a number, and checks the row to see if that number is already in the block
# returns 1 if in the block, 0 if not
def checkBlock(puz1,index,num):
    block = findBlock(puz1,index)

    for x in range(0, 3) :

        for y in range(0, 3) :
            if num == puz1[block+y] :
                return 1
        block += 9
    return 0
#print(checkBlock(puzzle1,43,3))

#checks an index to see if a number would fit at that index
#returns true if it would be valid, false if not valid
def checkAll(index,num) :
     if checkBlock(puzzle1,index,num) == 0 and checkRow(puzzle1,index,num) == 0 and checkCol(puzzle1,index,num) == 0 :
         return True

     return False

#finds an empty spot
#returns either the index of an empty spot, or None
def find_empty():
    for i in range(len(puzzle1)):
            if puzzle1[i] == 0:
                return i  # row, col

    return None

#recersive function, finds solution to s spot, continues on until it fails, goes back to spot and tries again until complete
def solve():
    find = find_empty()
    if find == None:
         return True
    else:
        index = find

    for i in range(1,10):
        if checkAll(index, i):
            puzzle1[index] = i
            if solve():
                return True

            puzzle1[index] = 0

    return False


#prints the puzzle in a readable format
def printPuzzle(puz1):

    for x in range (0,81):
        print(puz1[x], end = ' ')
        if(x + 1)%9 == 0:
            print("")

printPuzzle(puzzle1)
print("------Solving-------")
solve()
printPuzzle(puzzle1)


